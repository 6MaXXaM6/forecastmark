import asyncio
import os
import sys
from telethon import TelegramClient, events, Button
from config import API_ID, API_HASH, BOT_TOKEN, MODEL_PATH, ENCODERS_PATH, SESSION_NAME
from predictor import MarkPredictor

class MarkPredictorBot:
    def __init__(self):
        self.client = None
        self.predictor = None
        self.user_sessions = {}
        
    async def initialize(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        try:
            self.predictor = MarkPredictor(MODEL_PATH, ENCODERS_PATH)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
        self.client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self._register_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.client.start(bot_token=BOT_TOKEN)
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        await self.client.run_until_disconnected()
    
    def _register_handlers(self):
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        
        @self.client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            await self._handle_start(event)
        
        @self.client.on(events.NewMessage)
        async def message_handler(event):
            await self._handle_message(event)
    
    async def _handle_start(self, event):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        user_id = event.sender_id
        self.user_sessions[user_id] = {'step': 0}
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        buttons = []
        for tier in self.predictor.available_tiers:
            buttons.append([Button.text(tier, resize=True)])
        
        await event.reply(
            "üçπ **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–∞–ª–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤!**\n\n"
            "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏ —Ç–≤–æ–π –∫—É—Ä—Å:",
            buttons=buttons
        )
        self.user_sessions[user_id]['step'] = 1
    
    async def _handle_message(self, event):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        user_id = event.sender_id
        message_text = event.text.strip()
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        if message_text.startswith('/'):
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞
        if user_id not in self.user_sessions:
            await self._handle_start(event)
            return
        
        session = self.user_sessions[user_id]
        step = session.get('step', 0)
        
        try:
            if step == 1:  # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
                await self._handle_tier_selection(event, session, message_text)
            elif step == 2:  # –í—ã–±–æ—Ä –ª—é–±–∏–º–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
                await self._handle_like_drink_selection(event, session, message_text)
            elif step == 3:  # –ß–∞—Å—Ç–æ—Ç–∞ –ª—é–±–∏–º–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
                await self._handle_like_frequency(event, session, message_text)
            elif step == 4:  # –í—ã–±–æ—Ä —á–∞—Å—Ç–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
                await self._handle_often_drink_selection(event, session, message_text)
            elif step == 5:  # –ß–∞—Å—Ç–æ—Ç–∞ —á–∞—Å—Ç–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
                await self._handle_often_frequency(event, session, message_text)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
            await event.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ - –Ω–∞–ø–∏—à–∏ /start")
            self.user_sessions.pop(user_id, None)
    
    async def _handle_tier_selection(self, event, session, message_text):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        if message_text in self.predictor.available_tiers:
            session['tier'] = message_text
            session['step'] = 2
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
            buttons = []
            for drink in self.predictor.available_like_drinks[:10]:
                buttons.append([Button.text(drink, resize=True)])
            buttons.append([Button.text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –Ω–∞–ø–∏—Ç–∫–∏", resize=True)])
            
            await event.reply(
                f"‚úÖ –ö—É—Ä—Å: {message_text}\n\n"
                "üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–≤–æ–π **–ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫** –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
                f"*–î–æ—Å—Ç—É–ø–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(self.predictor.available_like_drinks)}*",
                buttons=buttons
            )
        else:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    
    async def _handle_like_drink_selection(self, event, session, message_text):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—é–±–∏–º–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
        if message_text == "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –Ω–∞–ø–∏—Ç–∫–∏":
            start_idx = session.get('drink_index', 10)
            end_idx = min(start_idx + 10, len(self.predictor.available_like_drinks))
            
            buttons = []
            for drink in self.predictor.available_like_drinks[start_idx:end_idx]:
                buttons.append([Button.text(drink, resize=True)])
            
            if end_idx < len(self.predictor.available_like_drinks):
                buttons.append([Button.text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –Ω–∞–ø–∏—Ç–∫–∏", resize=True)])
            
            session['drink_index'] = end_idx
            await event.reply("üéØ –í—ã–±–µ—Ä–∏ —Ç–≤–æ–π **–ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫**:", buttons=buttons)
            
        elif message_text in self.predictor.available_like_drinks:
            session['like_drink_f'] = message_text
            session['step'] = 3
            session.pop('drink_index', None)
            
            await event.reply(
                f"‚úÖ –õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {message_text}\n\n"
                "üî¢ **–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç—ã –µ–≥–æ –ø—å–µ—à—å?** (–≤ —Å—Ä–µ–¥–Ω–µ–º)\n"
                "*–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2*",
                buttons=Button.clear()
            )
        else:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞")
    
    async def _handle_like_frequency(self, event, session, message_text):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –ª—é–±–∏–º–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
        try:
            frequency = int(message_text)
            if frequency < 0 or frequency > 20:
                await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–∞–∑—É–º–Ω–æ–µ —á–∏—Å–ª–æ (0-20)")
                return
                
            session['frequency_day'] = frequency
            session['step'] = 4
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—å–µ—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ
            buttons = []
            for drink in self.predictor.available_often_drinks[:10]:
                buttons.append([Button.text(drink, resize=True)])
            buttons.append([Button.text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –Ω–∞–ø–∏—Ç–∫–∏", resize=True)])
            
            await event.reply(
                f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞: {frequency} —Ä–∞–∑ –≤ –¥–µ–Ω—å\n\n"
                "‚òï –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã **–ø—å–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ**:\n"
                f"*–î–æ—Å—Ç—É–ø–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(self.predictor.available_often_drinks)}*",
                buttons=buttons
            )
        except ValueError:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
    
    async def _handle_often_drink_selection(self, event, session, message_text):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
        if message_text == "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –Ω–∞–ø–∏—Ç–∫–∏":
            start_idx = session.get('often_drink_index', 10)
            end_idx = min(start_idx + 10, len(self.predictor.available_often_drinks))
            
            buttons = []
            for drink in self.predictor.available_often_drinks[start_idx:end_idx]:
                buttons.append([Button.text(drink, resize=True)])
            
            if end_idx < len(self.predictor.available_often_drinks):
                buttons.append([Button.text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –Ω–∞–ø–∏—Ç–∫–∏", resize=True)])
            
            session['often_drink_index'] = end_idx
            await event.reply("‚òï –í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—å–µ—à—å **—á–∞—â–µ –≤—Å–µ–≥–æ**:", buttons=buttons)
            
        elif message_text in self.predictor.available_often_drinks:
            session['often_drink_f'] = message_text
            session['step'] = 5
            session.pop('often_drink_index', None)
            
            await event.reply(
                f"‚úÖ –ß–∞—Å—Ç—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {message_text}\n\n"
                "üî¢ **–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç—ã –µ–≥–æ –ø—å–µ—à—å?** (–≤ —Å—Ä–µ–¥–Ω–µ–º)\n"
                "*–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3*",
                buttons=Button.clear()
            )
        else:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞")
    
    async def _handle_often_frequency(self, event, session, message_text):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —á–∞—Å—Ç–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        try:
            frequency = int(message_text)
            if frequency < 0 or frequency > 20:
                await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–∞–∑—É–º–Ω–æ–µ —á–∏—Å–ª–æ (0-20)")
                return
                
            session['frequency_day_o'] = frequency
            
            # –í–°–ï –î–ê–ù–ù–´–ï –°–û–ë–†–ê–ù–´ - –î–ï–õ–ê–ï–ú –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï
            await event.reply("‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ç–≤–æ–π –±–∞–ª–ª...")
            
            prediction = self.predictor.predict(
                session['tier'],
                session['frequency_day'],
                session['frequency_day_o'],
                session['like_drink_f'],
                session['often_drink_f']
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            result_message = (
                "üéì **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è**\n\n"
                f"üìä **–¢–≤–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –±–∞–ª–ª:** {prediction}\n\n"
                "üìù **–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
                f"‚Ä¢ –ö—É—Ä—Å: {session['tier']}\n"
                f"‚Ä¢ –õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {session['like_drink_f']}\n"
                f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ª—é–±–∏–º–æ–≥–æ: {session['frequency_day']} —Ä–∞–∑/–¥–µ–Ω—å\n"
                f"‚Ä¢ –ß–∞—Å—Ç—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {session['often_drink_f']}\n"
                f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ —á–∞—Å—Ç–æ–≥–æ: {session['frequency_day_o']} —Ä–∞–∑/–¥–µ–Ω—å\n\n"
                "üîÑ –•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ? –ù–∞–ø–∏—à–∏ /start"
            )
            
            await event.reply(result_message)
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            self.user_sessions.pop(event.sender_id, None)
            
        except ValueError:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")

async def main():
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    bot = MarkPredictorBot()
    await bot.initialize()

if __name__ == '__main__':
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è asyncio event loop
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")